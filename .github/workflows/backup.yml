name: nightly-db-dump

on:
  workflow_dispatch:
  schedule:
    - cron: "0 4 * * *"   # daily at 04:00 UTC

jobs:
  dump:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Connectivity + dump via Docker (Postgres 17)
        id: db
        shell: bash
        env:
          PGPASSWORD: ${{ secrets.DB_PASSWORD }}   # backup_user (or postgres) password
          DB_HOST:     ${{ secrets.DB_HOST }}      # e.g. db.qhixhmarbjkvjbsqpguz.supabase.co
          DB_PORT:     ${{ secrets.DB_PORT }}      # 5432
          DB_USER:     ${{ secrets.DB_USER }}      # backup_user (or postgres)
          DB_NAME:     ${{ secrets.DB_NAME }}      # postgres
        run: |
          set -euo pipefail
          : "${DB_HOST:?Missing DB_HOST}"
          : "${DB_USER:?Missing DB_USER}"
          : "${DB_NAME:?Missing DB_NAME}"
          : "${PGPASSWORD:?Missing DB_PASSWORD}"
          DB_PORT="${DB_PORT:-5432}"

          echo "Testing connectivity with Postgres 17 client (Docker)..."
          docker run --rm \
            -e PGPASSWORD="$PGPASSWORD" \
            -e PGSSLMODE=require \
            postgres:17-alpine \
            psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -d "$DB_NAME" -c "SELECT 1;"

          echo "Discovering RLS-protected tables to exclude..."
          # Get schema-qualified names of all RLS tables (regular tables only)
          RLS_TABLES=$(docker run --rm \
            -e PGPASSWORD="$PGPASSWORD" \
            -e PGSSLMODE=require \
            postgres:17-alpine \
            psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -d "$DB_NAME" -At -c \
            "SELECT quote_ident(n.nspname)||'.'||quote_ident(c.relname)
             FROM pg_class c
             JOIN pg_namespace n ON n.oid = c.relnamespace
             WHERE c.relkind='r' AND c.relrowsecurity = true;")

          # Build --exclude-table-data flags for each RLS table
          EXCLUDE_FLAGS=""
          if [ -n "${RLS_TABLES}" ]; then
            while IFS= read -r t; do
              # Skip internal schemas just in case
              case "$t" in
                auth.*|storage.*|realtime.*) continue ;;
              esac
              EXCLUDE_FLAGS+=" --exclude-table-data='${t}'"
            done <<< "$RLS_TABLES"
          fi
          echo "RLS excludes:${EXCLUDE_FLAGS:- none}"

          ts=$(date -u +'%Y%m%dT%H%M%SZ')
          outfile="dump_${ts}.pgc"

          echo "Running pg_dump (v17) excluding restricted schemas and all RLS tables..."
          docker run --rm \
            -e PGPASSWORD="$PGPASSWORD" \
            -e PGSSLMODE=require \
            -v "$PWD":/work \
            postgres:17-alpine \
            sh -c "pg_dump -h \"$DB_HOST\" -p \"$DB_PORT\" -U \"$DB_USER\" -d \"$DB_NAME\" \
                   --format=custom --no-owner --no-privileges \
                   --exclude-schema=auth \
                   --exclude-schema=storage \
                   --exclude-schema=realtime \
                   $EXCLUDE_FLAGS \
                   --file \"/work/$outfile\""

          echo "outfile=$outfile" >> "$GITHUB_OUTPUT"

      - name: Upload dump
        uses: actions/upload-artifact@v4
        with:
          name: pg-dump
          path: ${{ steps.db.outputs.outfile }}
          if-no-files-found: error
